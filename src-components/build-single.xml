<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenCms Common Component" default="jar" basedir=".">

<!-- Inherited ... -->
  <property name="opencms.input" location="${basedir}/.." />
  <property name="opencms.input.libs.compile" location="${opencms.input}/lib/compile" />
  <property name="opencms.input.libs.runtime" location="${opencms.input}/lib/runtime" />
  <property name="opencms.output" location="${opencms.input}/../BuildCms" />
  <property name="opencms.build" location="${opencms.output}/build" />
  <property name="java.target.version" value="1.5" />
<!-- ... Inherited -->


  <property name="component.input" location="${opencms.input}/src-components" />
  <property name="component.output.classes" location="${opencms.build}/classes-components" />
  <property name="component.output.jars"  location="${opencms.build}/jars-components" />

  <property name="component.jardesc" location="ant-opencms.jardesc" />
  <property name="jar.includes" value="**/*.properties,**/*.html" />


  <target name="init">
    <fail unless="component.jardesc">No jardesc specified</fail>
    <echo message="Processing jardesc ${component.jardesc}" />

    <xmlproperty file="${component.jardesc}" prefix="component.jardesc" keepRoot="false" collapseAttributes="true" />

    <!-- Process javaElements in jardesc -->
    <property name="component.input.javaelements" value="${component.jardesc.selectedElements.javaElement.handleIdentifier}" />
    <echo level="verbose" message="Component javaElements: ${component.input.javaelements}" />
    <loadresource property="component.input.includes">
      <propertyresource name="component.input.javaelements" />
      <filterchain>
        <tokenfilter>
          <stringtokenizer delims=","/>
          <replaceregex pattern=".*&lt;(.*)$" replace="\1/*" />
        </tokenfilter>
        <tokenfilter>
          <filetokenizer/>
          <replacestring from="." to="/" />
        </tokenfilter>
      </filterchain>
    </loadresource>

    <!-- Read jar output name -->
    <basename property="component.output.jarname" file="${component.jardesc.jar.path}" />

    <echo message="Component includes: ${component.input.includes}" />
    <echo message="Component input: ${component.input}" />
    <echo message="Component output classes: ${component.output.classes}" />
    <echo message="Component output jar: ${component.output.jars}/${component.output.jarname}" />
    <echo message="Component in-jar included files: ${jar.includes}" />
  </target>

  <target name="compile" depends="init"
        description="Compile the source of the OpenCms components" >
    <mkdir dir="${component.output.classes}"/>
    <javac 
        srcdir="${component.input}"
        destdir="${component.output.classes}" 
        debug="on" 
        optimize="on" 
        deprecation="on" 
        includes="${component.input.includes}"
        source="1.5" 
        target="${java.target.version}"
        includeantruntime="false">

        <classpath>
            <fileset dir="${opencms.input.libs.compile}">
                <include name="**/*.jar" />
            </fileset>
            <fileset dir="${opencms.input.libs.runtime}">
                <include name="**/*.jar" />
            </fileset>
        </classpath>
    </javac>
    <copy todir="${component.output.classes}" includeEmptyDirs="false">
      <fileset dir="${component.input}">
        <patternset includes="${component.input.includes}" excludes="**/*.java" />
        <include name="${jar.includes}" />
      </fileset>
    </copy>

  </target>

  <target name="jar" depends="compile"
        description="Creates the jars for the OpenCms component">
    <mkdir dir="${component.output.jars}"/>
    <jar
        jarfile="${component.output.jars}/${component.output.jarname}"
        basedir="${component.output.classes}"
        includes="${component.input.includes}" />
  </target>

  <target name="clean"
        description="Deletes autogenerated objects" >
    <delete dir="${component.output.classes}"/>
    <delete dir="${component.output.jars}"/>
  </target>

  <!-- Example target: define the task -->
  <target name="define-task" depends="jar">
    <taskdef name="anttesttask" classname="AntTestTask">
      <classpath>
        <pathelement location="${component.output.jars}/${component.output.jar}" />
      </classpath>
    </taskdef>
  </target>

  <!-- Example target: use the task -->
  <target name="use-task" depends="define-task">
    <anttesttask />
  </target>

</project>
