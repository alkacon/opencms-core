<?xml version="1.0" encoding="UTF-8"?>

<project name="OpenCms Common Module" default="dist" basedir=".">

	<property name="opencms.input" location="${basedir}/.." />
	<property name="opencms.output" location="${opencms.input}/../BuildCms" />
	<property name="opencms.input.warfiles" location="${opencms.input}/webapp" />
	<property name="opencms.input.libs.runtime" location="${opencms.input}/lib/runtime" />
	<property name="opencms.input.libs.compile" location="${opencms.input}/lib/compile" />
	<property name="opencms.build" location="${opencms.output}/build" />
	<property name="opencms.output.jars" location="${opencms.build}/jars-core" />
	<property name="opencms.output.jars-components" location="${opencms.output}/build/jars-components" />
	<property name="opencms.gwt.forcerebuild" value="false" />
	<property name="java.target.version" value="1.6" />

	<property environment="env" />
	<property file="${basedir}/opencms.properties" />
	<property file="${basedir}/../src-gwt/org/opencms/gwt/client/gwt.properties" />
	<taskdef resource="net/sf/antcontrib/antlib.xml" loaderref="contrib">
		<classpath>
			<pathelement location="${opencms.input.libs.compile}/ant-contrib-1.0b1.jar" />
		</classpath>
	</taskdef>
	
	<macrodef name="findmoduledir">
		<attribute name="name" default="" />
		<attribute name="result" default="" />
		<attribute name="external" default="" />
		<sequential>
			<var name="@{result}" unset="true" />
			<if>
				<resourceexists>
					<file file="${basedir}/@{name}" />
				</resourceexists>
				<then>
					<property name="@{result}" value="${basedir}/@{name}" />
				</then>
			</if>
			
			<for list="${externaldirectories}" param="exdir">
				<sequential>
					<if>
						<and>
							<not>
								<isset property="@{result}"/>
							</not>
							<resourceexists>
								<file file="@{exdir}/modules/@{name}"/>
							</resourceexists>
						</and>
						<then>
							<property name="@{result}" value="@{exdir}/modules/${module.name}" />
							<property name="@{external}" value="@{exdir}" />
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>
	
	<property name="module.output.classes" location="${opencms.build}/classes-${module.name}" />
	<property name="module.output.jar" location="${opencms.build}/jars-${module.name}" />
	<property name="module.output.zip" location="${opencms.output}/zip" />

	<property name="app.name" value="opencms" />

	<property name="jar.excludes" value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath,*.gwt.xml" />
	<property name="zip.excludes" value="**/CVS/*,**/.cvsignore,**/.nbattrs,**/.project,**/.classpath,component.properties" />
	<property name="jar.includes.single" value="**/*.properties,**/*.txt,**/*.dtd,**/*.xml,**/*.sql,**/*.gwt.rpc" />
	<property name="jar.includes.shared" value="*.properties,*.txt,*.dtd,*.xml,*.sql,*.gwt.rpc" />

	<target name="clean" depends="init" description="Deletes outputs">
		<if>
			<isset property="module.gwt.output" />
			<then>
				<!-- This only deletes the "loader" Javascript, but this is enough to force a rebuild if the compile-gwt target is executed. -->
				<delete>
					<fileset dir="${module.gwt.output}" includes="*.nocache.js" />
				</delete>
			</then>
		</if>
		<delete dir="${module.output.classes}" />
		<delete dir="${module.output.jar}" />
		<if>
			<available file="${module.output.zip}" />
			<then>
				<delete>
					<fileset dir="${module.output.zip}">
						<include name="${module.name}_*.zip" />
					</fileset>
				</delete>
			</then>
		</if>
	</target>
	
	<target name="initlocation" description="Inititalizes module location.">
		<findmoduledir name="${module.name}" result="module.input" external="currentexternal" />
		<property name="module.input.res" location="${module.input}/resources" />
		<property name="module.input.lib" location="${module.input.res}/system/modules/${module.name}/lib" />
		<property name="module.input.src.single" location="${module.input}/src" />
		<if>
				<isset property="currentexternal"/>
				<then>
					<property name="module.input.src.shared" location="${currentexternal}/src-modules" />
					<property name="module.input.src.gwt" location="${currentexternal}/src-gwt" />
				</then>
				<else>
					<property name="module.input.src.shared" location="${opencms.input}/src-modules" />
					<property name="module.input.src.gwt" location="${opencms.input}/src-gwt" />
				</else>
		</if>
	</target>

	<target name="init-opencmstasks">
		<taskdef resource="org/opencms/util/ant/taskdefs.properties" loaderref="opencms">
			<classpath>
				<pathelement location="${opencms.output.jars-components}/ant-opencms.jar" />
				<pathelement location="${opencms.input.libs.runtime}/commons-digester-1.8.jar" />
				<pathelement location="${opencms.input.libs.runtime}/commons-logging-1.1.1.jar" />
				<pathelement location="${opencms.input.libs.runtime}/commons-collections-3.2.1.jar" />
				<pathelement location="${opencms.input.libs.runtime}/commons-beanutils-1.8.3.jar" />
				<pathelement location="${opencms.input.libs.runtime}/dom4j-1.6.1.jar" />
				<pathelement location="${opencms.input.libs.runtime}/jaxen-1.1.1.jar" />
				<pathelement location="${opencms.input.libs.runtime}/jug-lgpl-2.0.0.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="init" depends="initlocation" description="Checks if all required libraries are available">

		<property name="version.revision" value="${version.number}" />
		<if>
			<not>
				<available file="${module.input}" type="dir" />
			</not>
			<then>
				<echo message="Building OpenCms Common Module ${module.name} for OpenCms ${version.revision}" />
				<fail>Module Directory not found: ${module.input}</fail>
			</then>
		</if>
		<if>
			<not>
				<or>
					<available file="${module.input}/module.properties" />
					<available file="${module.input.res}/manifest.xml" />
				</or>
			</not>
			<then>
				<echo message="Building OpenCms Common Module ${module.name} for OpenCms ${version.revision}" />
				<fail>No Module Configuration File found: ${module.input}/module.properties or ${module.input.res}/manifest.xml</fail>
			</then>
		</if>

		<if>
			<available file="${module.input.res}/manifest.xml" />
			<then>
				<readxmlproperty property="module.version" xmlfile="${module.input.res}/manifest.xml" element="export/module/version" />
				<readxmlproperty property="module.dependencies" xmlfile="${module.input.res}/manifest.xml" element="export/module/dependencies/dependency" attribute="name" />
			</then>
			<else>
				<property name="module.version" value="${version.revision}" />
				<property name="module.dependencies" value="" />
			</else>
		</if>
		<property file="${module.input}/module.properties" />

		<for list="${module.dependencies}" param="dependency" trim="true">
			<sequential>
				<echo message="Processing dependency @{dependency} of ${module.name}" />
				<findmoduledir name="@{dependency}" result="@{dependency}.input" external="dummy" />
				<property name="@{dependency}.output.classes" location="${opencms.build}/classes-@{dependency}" />
				<property name="@{dependency}.output.jar" location="${opencms.build}/jars-@{dependency}" />
				<if>
					<available file="${@{dependency}.input}/resources/manifest.xml" />
					<then>
						<readxmlproperty property="@{dependency}.module.version" xmlfile="${@{dependency}.input}/resources/manifest.xml" element="export/module/version" />
						<readxmlproperty property="@{dependency}.module.dependencies" xmlfile="${@{dependency}.input}/resources/manifest.xml" element="export/module/dependencies/dependency" attribute="name" />
					</then>
				</if>
				<property file="${@{dependency}.input}/module.properties" prefix="@{dependency}" />
				<property name="@{dependency}.output.zip" location="${module.output.zip}/@{dependency}_${@{dependency}.module.version}.zip" />

				<condition property="@{dependency}.available">
					<and>
						<available file="${@{dependency}.output.zip}" />
					</and>
				</condition>
			</sequential>
		</for>

		<if>
			<available file="${module.input.src.single}" />
			<then>
				<property name="src.mode" value="single" />
				<property name="module.input.src" location="${module.input.src.single}" />
			</then>
			<else>
				<var name="module.input.src.test" value="${module.input.src.shared}" />
				<var name="module.package" value="" />
				<for list="${module.name}" param="package" delimiter="." trim="true">
					<sequential>
						<var name="module.input.src.test" value="${module.input.src.test}/@{package}" />
						<var name="module.package" value="${module.package}@{package}/" />
					</sequential>
				</for>
				<if>
					<isset property="module.packages" />
					<then>
						<property name="src.mode" value="multishared" />
						<property name="module.input.src" location="${module.input.src.shared}" />
					</then>
					<else>
						<if>
							<available file="${module.input.src.test}" />
							<then>
								<var name="notemptyVar" unset="true" />
								<for param="file">
									<fileset dir="${module.input.src.test}">
										<include name="*" />
									</fileset>
									<sequential>
										<var name="notemptyVar" value="true" />
									</sequential>
								</for>
								<if>
									<!-- properties set by var for some reason get passed to other build files called with
									the 'ant' task even when the inheritAll attribute is set to false, so we set a normal
									property instead.
									-->
									<isset property="notemptyVar" />
									<then>
										<property name="notempty" value="true" />
									</then>
								</if>
							</then>
						</if>
						<if>
							<isset property="notempty" />
							<then>
								<property name="src.mode" value="shared" />
								<property name="module.input.src" location="${module.input.src.test}" />
							</then>
							<else>
								<property name="src.mode" value="none" />
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>

		<condition property="tomcat.home" value="${env.TOMCAT_HOME}">
			<available file="${env.TOMCAT_HOME}" type="dir" />
		</condition>

		<condition property="tomcat.home" value="${env.CATALINA_HOME}">
			<available file="${env.CATALINA_HOME}" type="dir" />
		</condition>

		<condition property="resources.available">
			<and>
				<available file="${module.input.res}" type="dir" />
			</and>
		</condition>

		<if>
			<isset property="module.gwt" />
			<then>
				<propertyregex property="module.gwt.package"
											          override="true"
													  global="true"
										              input="${module.gwt}"
										              regexp="\."
										              replace="/" />
				<property name="module.gwt.xmlfile" location="${module.input.src.gwt}/${module.gwt.package}.gwt.xml" />
				<readxmlproperty property="module.gwt.rename" xmlfile="${module.gwt.xmlfile}" element="module" attribute="rename-to" />
				<if>
					<equals arg1="${module.gwt.rename}" arg2="" />
					<then>
						<property name="module.gwt.bootstrap" value="${module.gwt}" />
					</then>
					<else>
						<property name="module.gwt.bootstrap" value="${module.gwt.rename}" />
					</else>
				</if>
				<property name="module.gwt.output" location="${module.input.res}/system/modules/${module.name}/resources/${module.gwt.bootstrap}" />
			</then>
		</if>

		<echo message="Building OpenCms Common Module ${module.name} ${module.version} for OpenCms ${version.revision}" />
		<echo message=" " />
		<echo message="OpenCms core lib directory is: ${opencms.output.jars}" />
		<echo message="OpenCms runtime lib directory is: ${opencms.input.libs.runtime}" />
		<echo message="OpenCms compile lib directory is: ${opencms.input.libs.compile}" />
		<echo message="OpenCms output directory is: ${opencms.output}" />
		<echo message="Module input directory is: ${module.input}" />
		<echo message="Module source directory is: ${module.input.src}" />
		<echo message="Detected Java version: ${ant.java.version}" />
		<echo message="Java target version: ${java.target.version}" />
		<echo message="Tomcat home is: ${tomcat.home}" />
		<echo message="Excluded files in Jar: ${jar.excludes}" />
		<if>
			<equals arg1="${src.mode}" arg2="shared" />
			<then>
				<echo message="Included files in Jar: ${jar.includes.shared}" />
			</then>
			<else>
				<echo message="Included files in Jar: ${jar.includes.single}" />
			</else>
		</if>
		<echo message=" " />
		<echo message="Module dependencies: ${module.dependencies}" />
		<echo message="Additional lib folder: ${module.input.lib}" />
		<if>
			<isset property="module.gwt" />
			<then>
				<echo message="GWT module: ${module.gwt}" />
				<echo message="GWT output: ${module.gwt.output}" />
				<echo message="GWT source: ${module.gwt.src}" />
			</then>
		</if>
	</target>

	<target name="builddeps" description="Generates all the modules dependencies">
		<for list="${module.dependencies}" param="dependency" trim="true">
			<sequential>
				<if>
					<not>
						<istrue value="${@{dependency}.available}" />
					</not>
					<then>
						<echo message="Module dependency @{dependency} is missing, building it" />
						<ant antfile="${basedir}/build.xml" target="dependencies" inheritAll="false">
							<property name="module.name" value="@{dependency}" />
						</ant>
					</then>
				</if>
			</sequential>
		</for>

	</target>

	<target name="get-dependency-paths" depends="init,builddeps">
		<if>
			<not>
				<equals arg1="${src.mode}" arg2="none" />
			</not>
			<then>
				<var name="module.dependencies.path" value="." />
				<for list="${module.dependencies}" param="dependency" trim="true">
					<sequential>
						<if>
							<available file="${@{dependency}.output.jar}" />
							<then>
								<for param="archive">
									<fileset dir="${@{dependency}.output.jar}">
										<include name="**/*.jar" />
									</fileset>
									<sequential>
										<var name="module.dependencies.path" value="${module.dependencies.path}:@{archive}" />
									</sequential>
								</for>
							</then>
						</if>
					</sequential>
				</for>
				<var name="module.libs.path" value="." />
				<if>
					<available file="${module.input.lib}" />
					<then>
						<for param="archive">
							<path>
								<fileset dir="${module.input.lib}" includes="*.jar" />
							</path>
							<sequential>
								<var name="module.libs.path" value="${module.libs.path}:@{archive}" />
							</sequential>
						</for>
					</then>
				</if>
			</then>
		</if>

	</target>
	<target name="concat-scripts">
		<if>
					<isset property="module.scripts" />
					<then>
						<echo message="Generating script" />
						<delete file="${module.input.res}/system/modules/${module.name}/resources/${module.name}.scripts.js" quiet="true" />
						<for list="${module.scripts}" param="script-file">
							<sequential>
						<concat destfile="${module.input.res}/system/modules/${module.name}/resources/${module.name}.scripts.js" append="yes">
						                 <string>

</string>
							<fileset dir="${module.input}/scripts" includes="@{script-file}"/>
						</concat>
								</sequential>
							</for>
					</then>
			<else>
				<echo message="Script property not set" />
			</else>
		</if>
	</target>
	<target name="compile-gwt" depends="init, builddeps, get-dependency-paths" description="Compiles GWT ${module.gwt} module">
		
		<if>
			<isset property="module.gwt" />
			<then>
				<outofdate verbose="false" force="${opencms.gwt.forcerebuild}">
					<sourcefiles>
						<fileset dir="${opencms.input}/src" erroronmissingdir="false">
							<include name="**/shared/**" />
						</fileset>
						<fileset dir="${module.input.src.gwt}" erroronmissingdir="false">
							<include name="**/*.gwt.xml" />
							<include name="**/client/**" />
						</fileset>
						<fileset dir="${opencms.input.libs.runtime}" />
						<fileset dir="${opencms.input.libs.compile}" />
						<pathelement location="${opencms.output.jars-components}/gwt-opencms.jar" />
					</sourcefiles>
					<targetfiles path="${module.gwt.output}/${module.gwt.bootstrap}.nocache.js" />
					<sequential>
						<echo message="Deleting GWT output folder: ${module.gwt.output}"/>
						<delete dir="${module.gwt.output}" failonerror="false" />

						<!-- GWT compiling -->
						<java dir="${basedir}" 
									  classname="com.google.gwt.dev.Compiler" 
									  fork="yes" 
									  failonerror="true"
									  maxmemory="1024m">
							<!--	<arg value="-XdisableClassMetadata" />
						  			<arg value="-XdisableCastChecking" /> 
						  			<arg value="-compileReport" />  removing compiler args for faster compiling and easier debugging -> stacktrace -->
							<arg value="-strict" />
							<arg value="-localWorkers" />
							<arg value="2" />
							<arg value="-logLevel" />
							<arg value="INFO" />
							<arg value="-style" />
							<arg value="obfuscated" />
							<arg value="-gen" />
							<arg file="${opencms.output}/gwt/gen/" />
							<arg value="-extra" />
							<arg file="${opencms.output}/gwt/extra/" />
							<arg value="-war" />
							<arg file="${module.input.res}/system/modules/${module.name}/resources" />
							<arg value="${module.gwt}" />
							<classpath>
								<fileset dir="${opencms.input.libs.runtime}">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${opencms.input.libs.compile}">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${opencms.output.jars}">
									<include name="**/*.jar" />
								</fileset>
								<pathelement path="${module.input.src.single}" />
								<pathelement path="${module.input.src.shared}" />
								<pathelement path="${module.input.src.gwt}" />
								<pathelement path="${module.dependencies.path}" />
								<pathelement path="${module.libs.path}" />
								<pathelement path="${opencms.input}/src" />
								<pathelement path="${opencms.input}/src-gwt" />
								<pathelement path="${opencms.input.gwt}" />
								<pathelement path="${opencms.output}/build/classes-gwt-rpc" />
								<pathelement path="${opencms.output}/build/classes-gwt" />
							</classpath>
						</java>
						<delete dir="${module.gwt.output}/../WEB-INF" failonerror="false" />
						<delete dir="${module.gwt.output}/../../gwt-unitCache" failonerror="false" />
					</sequential>
				</outofdate>
			</then>
		</if>
	</target>

	<target name="compile" depends="compile-classes, compile-gwt, concat-scripts, init-opencmstasks" description="Compiles ${module.name} module classes and GWT classes" />

	<target name="compile-classes" depends="init, builddeps, get-dependency-paths" description="Compiles ${module.name} module classes">
		<if>
			<not>
				<equals arg1="${src.mode}" arg2="none" />
			</not>
			<then>
				<mkdir dir="${module.output.classes}" />
				<if>
					<equals arg1="${src.mode}" arg2="shared" />
					<then>
						<javac 
							srcdir="${module.input.src.shared}" 
							destdir="${module.output.classes}" 
							debug="on" 
							optimize="on" 
							deprecation="on" 
							includes="${module.package}/*.java" 
							excludes="${module.package}/client/**.java"
							source="1.5" 
							target="${java.target.version}">

							<classpath>
								<fileset dir="${opencms.input.libs.runtime}">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${opencms.input.libs.compile}">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${opencms.output.jars}">
									<include name="**/*.jar" />
								</fileset>
								<pathelement path="${module.dependencies.path}" />
								<pathelement path="${module.libs.path}" />
							</classpath>
						</javac>
						<copy todir="${module.output.classes}/${module.package}">
							<fileset dir="${module.input.src}" includes="${jar.includes.shared}" excludes="${jar.excludes}" />
						</copy>
					</then>
					<else>
						<if>
							<equals arg1="${src.mode}" arg2="multishared" />
							<then>
								<for list="${module.packages}" param="mpackage" trim="true">
									<sequential>
										<var name="package.dir" value="" />
										<for list="@{mpackage}" param="package" delimiter="." trim="true">
											<sequential>
												<var name="module.input.src.test" value="${module.input.src.test}/@{package}" />
												<var name="package.dir" value="${package.dir}@{package}/" />
											</sequential>
										</for>
										<javac 
											srcdir="${module.input.src.shared}" 
											destdir="${module.output.classes}" 
											debug="on" 
											optimize="on" 
											deprecation="on" 
											includes="${package.dir}/*.java" 
											excludes="${module.package}/client/**.java"
											source="1.5" 
											target="${java.target.version}">

											<classpath>
												<fileset dir="${opencms.input.libs.runtime}">
													<include name="**/*.jar" />
												</fileset>
												<fileset dir="${opencms.input.libs.compile}">
													<include name="**/*.jar" />
												</fileset>
												<fileset dir="${opencms.output.jars}">
													<include name="**/*.jar" />
												</fileset>
												<pathelement path="${module.dependencies.path}" />
												<pathelement path="${module.libs.path}" />
											</classpath>
										</javac>
										<copy todir="${module.output.classes}/${package.dir}">
											<fileset dir="${module.input.src.shared}/${package.dir}" includes="${jar.includes.shared}" excludes="${jar.excludes}" />
										</copy>
									</sequential>
								</for>
							</then>
							<else>
								<javac 
									srcdir="${module.input.src.single}" 
									destdir="${module.output.classes}" 
									debug="on" 
									optimize="on" 
									deprecation="on" 
									source="1.5" 
									target="${java.target.version}">

									<exclude name="**/test/**/*.java" />
									<exclude name="${module.package}/client/**.java" />
									<classpath>
										<fileset dir="${opencms.input.libs.runtime}">
											<include name="**/*.jar" />
										</fileset>
										<fileset dir="${opencms.input.libs.compile}">
											<include name="**/*.jar" />
										</fileset>
										<fileset dir="${opencms.output.jars}">
											<include name="**/*.jar" />
										</fileset>
										<pathelement path="${module.dependencies.path}" />
										<pathelement path="${module.libs.path}" />
									</classpath>
								</javac>
								<copy todir="${module.output.classes}">
									<fileset dir="${module.input.src.single}" includes="${jar.includes.single}" excludes="${jar.excludes.single}">
										<exclude name="**/test/**" />
									</fileset>
								</copy>
							</else>
						</if>
					</else>
				</if>
			</then>
		</if>
	</target>
	


	<target name="jar" depends="compile" description="Generates the .jar file for module ${module.name}">

		<if>
			<equals arg1="${src.mode}" arg2="multishared" />
			<then>
				<mkdir dir="${module.output.jar}" />
				<delete dir="${module.output.jar}/${module.name}.jar" failonerror="false" />
				<for list="${module.packages}" param="mpackage" trim="true">
					<sequential>
						<var name="package.dir" value="" />
						<for list="@{mpackage}" param="package" delimiter="." trim="true">
							<sequential>
								<var name="package.dir" value="${package.dir}@{package}/" />
							</sequential>
						</for>
						<jar jarfile="${module.output.jar}/${module.name}.jar" 
							basedir="${module.output.classes}" 
							update="true"
							includes="${package.dir}/**" />
					</sequential>
				</for>

				<for list="${module.dependencies}" param="dependency" trim="true">
					<sequential>
						<if>
							<available file="${@{dependency}.output.jar}" />
							<then>
								<copy todir="${module.output.jar}">
									<fileset dir="${@{dependency}.output.jar}" includes="*.jar" />
								</copy>
							</then>
						</if>
					</sequential>
				</for>
			</then>
			<else>
				<if>
					<not>
						<equals arg1="${src.mode}" arg2="none" />
					</not>
					<then>
						<mkdir dir="${module.output.jar}" />
						<jar jarfile="${module.output.jar}/${module.name}.jar" 
							basedir="${module.output.classes}" 
							includes="${module.package}/**" />

						<for list="${module.dependencies}" param="dependency" trim="true">
							<sequential>
								<if>
									<available file="${@{dependency}.output.jar}" />
									<then>
										<copy todir="${module.output.jar}">
											<fileset dir="${@{dependency}.output.jar}" includes="*.jar" />
										</copy>
									</then>
								</if>
							</sequential>
						</for>
					</then>
				</if>
			</else>
		</if>
	</target>

	<target name="dist" depends="jar" description="Builds the distribution .zip file">

		<mkdir dir="${module.output.zip}" />
		<if>
			<isset property="module.gwt" />
			<then>
				<syncmanifest
					srcmanifestfile="${module.input.res}/manifest.xml"
					dstmanifestfile="${module.input.res}/manifest.synched.xml"
					base="${module.input.res}/"
					directory="${module.gwt.output}" />
				<zipfileset id="manifest.zipid" dir="${module.input.res}" includes="manifest.synched.xml" fullpath="manifest.xml" />
			</then>
			<else>
				<zipfileset id="manifest.zipid" dir="${module.input.res}" prefix="" includes="manifest.xml" />
			</else>
		</if>
		<if>
			<available file="${module.output.jar}" />
			<then>
				<zip destfile="${module.output.zip}/${module.name}_${module.version}.zip">
					<zipfileset dir="${module.output.jar}" prefix="system/modules/${module.name}/lib/" includes="${module.name}.jar" />
					<zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes},manifest*.xml" />
					<zipfileset refid="manifest.zipid" />
				</zip>
			</then>
			<else>
				<zip destfile="${module.output.zip}/${module.name}_${module.version}.zip">
					<zipfileset dir="${module.input.res}" prefix="" excludes="${zip.excludes},manifest*.xml" />
					<zipfileset refid="manifest.zipid" />
				</zip>
			</else>
		</if>
		<delete file="${module.input.res}/manifest.synched.xml" failonerror="false" />
		<delete file="${module.input.res}/manifest.buildid-set.xml" failonerror="false" />
	</target>

	<target name="tomcat.copy" depends="dist" description="Copies module resources to Tomcat directory">

		<if>
			<available file="${module.output.jar}" />
			<then>
				<copy todir="${tomcat.home}/webapps/${app.name}/WEB-INF/lib">
					<fileset dir="${module.output.jar}" includes="*.jar" />
				</copy>
			</then>
		</if>
		<if>
			<available file="${module.output.zip}/${module.name}_${module.version}.zip" />
			<then>
				<copy file="${module.output.zip}/${module.name}_${module.version}.zip" todir="${tomcat.home}/webapps/${app.name}/WEB-INF/packages/modules" />
			</then>
		</if>
	</target>

	<target name="tomcat.update" depends="tomcat.copy" description="Recompile changes and installs them in Tomcat webapps directory" />

	<target name="tomcat.all" depends="clean, tomcat.update" description="Does a complete recompile of the module and installs it in Tomcat webapps directory" />

	<target name="jboss.copy" depends="dist" description="Copies module resources to JBoss directory">

		<if>
			<available file="${module.output.jar}" />
			<then>
				<copy todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF/lib">
					<fileset dir="${module.output.jar}" includes="*.jar" />
				</copy>
			</then>
		</if>
		<if>
			<available file="${module.output.zip}/${module.name}_${module.version}.zip" />
			<then>
				<copy file="${module.output.zip}/${module.name}_${module.version}.zip" todir="${jboss.home}/server/default/deploy/${app.name}.war/WEB-INF/packages/modules" />
			</then>
		</if>
	</target>

	<target name="jboss.update" depends="jboss.copy" description="Recompile changes and installs them in JBoss deploy directory" />

</project>
